substitutions:
  device_friendly_name: "X light switch"
  device_name: "x-light-switch"
  #device_ip: "0.0.0.0"
  device_make: "Sonoff"
  device_model: "Switchman M5 (1-Gang)"
  package_version: "1.0.2"

  button_a_gpio: GPIO00           # Button A
  relay_a_gpio: GPIO23            # Relay A
  led_indicator_gpio: GPIO19      # Red LED
  led_status_gpio: GPIO05         # Blue LED
  led_pwm_output_gpio: GPIO18     # LED PWM output

  api_key: !secret api_key
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password

  log_level: INFO
  timezone: "Europe/Tallinn"

  # Button timing configurations
  filter_delay_on: 50ms
  filter_delay_off: 50ms

  # # Single Click Timings
  timing_click_1: ON for at most 500ms
  timing_click_2: OFF for at least 100ms
  
  # Double Click Timings
  timing_double_click_1: ON for at most 500ms
  timing_double_click_2: OFF for at most 400ms
  timing_double_click_3: ON for at most 500ms
  timing_double_click_4: OFF for at least 250ms

  # Button Hold Timings
  timing_hold: ON for at least 1s
  timing_hold_repeat: 500ms

  # Pulse Timings
  timing_pulse: 250ms

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: recommended

ota:
  - platform: esphome
    password: !secret ota_password

esphome:
  name: "${device_name}"
  friendly_name: "${device_friendly_name}"
  comment: "${device_model} by ${device_make} version ${package_version}"
  name_add_mac_suffix: false
  min_version: "0.0.1"
  project:
    name: "${device_make}.${device_model}"
    version: "${package_version}"
  on_boot:
  - priority: 900.0
    then:
      - lambda: |-
          id(cpu_speed) = ESP.getCpuFreqMHz();

logger:
  # Enable logging via network and disable serial port
  level: "${log_level}"
  baud_rate: 0

globals:
  # Define a global variable for CPU speed
  - id: cpu_speed
    type: int
    restore_value: no
    initial_value: "0"

wifi:
  fast_connect: false
  power_save_mode: none
  ssid: "${wifi_ssid}"
  password: "${wifi_password}"
  #use_address: "${device_ip}"

  ap:
    ssid: "${device_name}"
    password: "${wifi_password}"

time:
  - platform: sntp
    id: time_service
    timezone: ${timezone}

captive_portal:

web_server:
  port: 80

api:
  #encryption:
    #key: "${api_key}"

ota:
  safe_mode: true
  password: "${ota_password}"

text_sensor:
  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP Address"
      icon: "mdi:wan"

  - platform: template
    name: "Uptime"
    id: uptime_human
    icon: "mdi:timer-check-outline"
    update_interval: 60s
    entity_category: "diagnostic"
    disabled_by_default: true

sensor:
  # Captures the uptime and updates the human-readable text sensor displayed. This is an internal sensor only.
  - platform: uptime
    name: "Uptime"
    id: sensor_uptime
    update_interval: 60s
    entity_category: "diagnostic"
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(sensor_uptime).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

    # Device Memory
  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: "diagnostic"
    disabled_by_default: true

  - platform: internal_temperature
    name: "Internal Temperature"
    disabled_by_default: true
    icon: mdi:heat-wave

    # Device CPU Frequency
  - platform: template
    name: "CPU Frequency"
    icon: "mdi:speedometer"
    accuracy_decimals: 0
    unit_of_measurement: Mhz
    disabled_by_default: true
    lambda: |-
      return (id(cpu_speed));
    entity_category: diagnostic

  - platform: wifi_signal
    name: "RSSI"
    id: sensor_rssi
    update_interval: 60s
    entity_category: "diagnostic"

button:
  - platform: restart
    name: "Reboot Device"
    id: button_restart
    icon: mdi:power-cycle
    entity_category: "diagnostic"

  # Provide a button to reset all defined flash settings.
  - platform: factory_reset
    disabled_by_default: false
    name: "Load Factory Settings"
    id: factory_reset_all
    icon: mdi:factory

  - platform: template
    name: "Button A double click action"
    id: "button_a_double_click_action"
    on_press:
      - homeassistant.event:
          event: esphome.switchman_m5
          data:
            button: A
            action: double_click
      - logger.log: "Button A double click action received from Home Assistant"

  - platform: template
    name: "Button A hold action"
    id: "button_a_hold_action"
    on_press:
      - homeassistant.event:
          event: esphome.switchman_m5
          data:
            button: A
            action: hold
      - logger.log: "Button A hold action received from Home Assistant"

switch:
  # Physical indicator of the relay
  - platform: gpio
    name: "LED indicator"
    id: led_indicator
    pin: ${led_indicator_gpio}

  # Physical GPIO Relay
  - platform: gpio
    name: "Relay A"
    pin: ${relay_a_gpio}
    id: relay_a
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
    - switch.turn_on: button_a_state
    on_turn_off:
    - switch.turn_off: button_a_state

  - platform: template
    name: "Button A state"
    id: button_a_state
    optimistic: true #?
    on_turn_on: 
      - homeassistant.event:
          event: esphome.switchman_m5
          data:
            button: A
            action: switch_on
      - switch.turn_on: led_indicator
    on_turn_off: 
      - homeassistant.event:
          event: esphome.switchman_m5
          data:
            button: A
            action: switch_off
      - switch.turn_off: led_indicator

select:
    # Config-only select for operation mode
  - platform: template
    name: "Mode - Button A"
    id: mode_a
    icon: 'mdi:link-box-outline'
    entity_category: 'config'
    options:
      - "Latching"    # 0
      - "Momentary"   # 1
      - "Pulse"       # 2
      - "Decoupled"   # 3
    initial_option: "Latching"
    restore_value: true
    optimistic: true
    set_action:
      - switch.turn_off: relay_a

output:
  # Physical GPIO PWM for off-state background brightness
  # This pin controls the background brightness for all LEDs
  # physically attached to the relays
  - platform: ledc
    id: pwm_output
    pin: ${led_pwm_output_gpio}
    frequency: 1000 Hz

light:
  # HA UI connection to the background brightness (PWM) pin
  - platform: monochromatic
    output: pwm_output
    name: "Red LED"
    restore_mode: RESTORE_DEFAULT_OFF
    icon: 'mdi:led-outline'
    entity_category: 'config'
  
  # Physical pin to the connection status LED (internal)
  - platform: status_led
    name: "Blue LED"
    id: led_status
    pin:
      number: ${led_status_gpio}
      inverted: true
      ignore_strapping_warning: true
    # internal: true
    restore_mode: RESTORE_DEFAULT_ON

binary_sensor:
  # Make the status LED blink when not connected/trying to connect
  - platform: template
    name: "API connected"
    id: sensor_api_connected
    internal: true
    entity_category: 'diagnostic'
    device_class: 'connectivity'
    lambda: return global_api_server->is_connected();
    on_press:
      - light.turn_off: led_status
    on_release:
      - light.turn_on: led_status

  # Diagnostic sensor for connection
  - platform: status
    name: "API Status"
    id: sensor_status
    disabled_by_default: true

  # Physical Button A
  - platform: gpio
    name: "Button A"
    id: button_a
    pin: 
      number: ${button_a_gpio}
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true

    filters:
      - delayed_on: ${filter_delay_on}
      - delayed_off: ${filter_delay_off}
    
    on_press:
      - if:
          condition:
            - lambda: 'return id(mode_a).active_index() == 0;' # Latching
          then:
            - switch.toggle: relay_a
      - if:
          condition:
            - lambda: 'return id(mode_a).active_index() == 1;' # Momentary
          then:
            - switch.turn_on: relay_a
      - if:
          condition:
            - lambda: 'return id(mode_a).active_index() == 2;' # Pulse
          then:
            - switch.turn_on: relay_a
            - delay: ${timing_pulse}
            - switch.turn_off: relay_a
      - if:
          condition:
            - lambda: 'return id(mode_a).active_index() == 3;' # Decoupled
          then:
            - switch.toggle: led_indicator
            - switch.toggle: button_a_state
  
    on_release:
      - if:
          condition:
            - lambda: 'return id(mode_a).active_index() == 1;' # Momentary
          then:
            - switch.turn_off: relay_a

    on_multi_click:
      # single click detection
      # - timing:
      #   - ${timing_click_1}
      #   - ${timing_click_2}
      #   then:
      #     - homeassistant.event:
      #         event: esphome.switchman_m5
      #         data:
      #           button: A
      #           action: single_click

      # double click detection
      - timing:
          - ${timing_double_click_1}
          - ${timing_double_click_2}
          - ${timing_double_click_3}
          - ${timing_double_click_4}
        then:
          - button.press: button_a_double_click_action

      # hold detection
      - timing:
          - ${timing_hold}
        then:
          - while:
              condition:
                binary_sensor.is_on: button_a
              then:
                - light.toggle: led_status
                - button.press: button_a_hold_action
                - delay: ${timing_hold_repeat}
          - light.turn_off: led_status
