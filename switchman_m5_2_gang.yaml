substitutions:
  device_friendly_name: "Switchman M5 2G"
  device_name: "switchman-m5-2g"
  device_make: "Sonoff"
  device_model: "Switchman M5 (2-Gang)"
  package_version: "3.1.0"

  api_key: !secret api_key
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  ota_password: !secret ota_password
  ap_password: !secret ap_password

  button_a_gpio: GPIO04
  button_b_gpio: GPIO15
  relay_a_gpio: GPIO23
  relay_b_gpio: GPIO19
  red_led_gpio: GPIO22
  blue_led_gpio: GPIO05

  button_a_on_service: ""
  button_a_on_entity: ""

  button_a_off_service: ""
  button_a_off_entity: ""

  button_a_hold_service: ""
  button_a_hold_entity: ""

  default_mode_a: "Coupled"
  default_relay_a_target_mode: "Off"

  button_b_on_service: ""
  button_b_on_entity: ""

  button_b_off_service: ""
  button_b_off_entity: ""

  button_b_hold_service: ""
  button_b_hold_entity: ""

  default_mode_b: "Coupled"
  default_relay_b_target_mode: "Off"

  hold_start_ms: 200ms
  debounce_ms: 50ms
  # Home Assistant entities used for optional peer LED sync.
  # Default to self, so no external entity is required unless you override them.
  peer_button_a_entity: "switch.${device_name}_button_a_state"
  peer_button_b_entity: "switch.${device_name}_button_b_state"

esphome:
  name: "${device_name}"
  friendly_name: "${device_friendly_name}"
  comment: "${device_model} by ${device_make} version ${package_version}"
  on_boot:
    - priority: 900.0
      then:
        - lambda: |-
            id(cpu_speed) = ESP.getCpuFreqMHz();

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: recommended

logger:
  level: WARN
  baud_rate: 0

preferences:
  flash_write_interval: 5min

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}
  power_save_mode: none

ota:
  platform: esphome
  password: ${ota_password}

api:
  encryption:
    key: ${api_key}

globals:
  - id: a_hold_triggered
    type: bool
    restore_value: false
    initial_value: "false"
  - id: b_hold_triggered
    type: bool
    restore_value: false
    initial_value: "false"
  - id: button_a_busy
    type: bool
    restore_value: false
    initial_value: "false"
  - id: button_b_busy
    type: bool
    restore_value: false
    initial_value: "false"
  - id: button_a_suppress
    type: bool
    restore_value: false
    initial_value: "false"
  - id: button_b_suppress
    type: bool
    restore_value: false
    initial_value: "false"
  - id: cpu_speed
    type: int
    restore_value: false
    initial_value: "0"

text_sensor:
  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP Address"
      icon: "mdi:wan"

  - platform: template
    name: "Uptime"
    id: uptime_human
    icon: "mdi:timer-check-outline"
    update_interval: 60s
    entity_category: "diagnostic"
    disabled_by_default: true

sensor:
  - platform: uptime
    name: "Uptime (s)"
    id: sensor_uptime
    update_interval: 60s
    entity_category: "diagnostic"
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(sensor_uptime).raw_state);
              int days = seconds / (24 * 3600);
              seconds %= 24 * 3600;
              int hours = seconds / 3600;
              seconds %= 3600;
              int minutes = seconds / 60;
              seconds %= 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: "diagnostic"
    disabled_by_default: true

  - platform: internal_temperature
    name: "Internal Temperature"
    icon: mdi:heat-wave
    disabled_by_default: true

  - platform: template
    name: "CPU Frequency"
    icon: "mdi:speedometer"
    accuracy_decimals: 0
    unit_of_measurement: MHz
    disabled_by_default: true
    lambda: |-
      return (id(cpu_speed));
    entity_category: diagnostic

  - platform: wifi_signal
    name: "RSSI"
    id: sensor_rssi
    update_interval: 60s
    entity_category: "diagnostic"

button:
  - platform: restart
    name: "Reboot Device"
    id: button_restart
    icon: mdi:power-cycle
    entity_category: "diagnostic"

  - platform: template
    name: "Button A hold action"
    id: button_a_sim_hold
    on_press:
      - script.execute: a_hold_action

  - platform: template
    name: "Button B hold action"
    id: button_b_sim_hold
    on_press:
      - script.execute: b_hold_action

light:
  - platform: status_led
    name: "Blue LED"
    id: blue_led
    internal: true
    pin:
      number: ${blue_led_gpio}
      inverted: true
      ignore_strapping_warning: true
    restore_mode: RESTORE_DEFAULT_OFF

switch:
  - platform: gpio
    name: "Red LED"
    id: red_led
    internal: true
    pin: ${red_led_gpio}

  - platform: gpio
    name: "Relay A"
    id: relay_a
    pin: ${relay_a_gpio}
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    name: "Relay B"
    id: relay_b
    pin: ${relay_b_gpio}
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    name: "Button A state"
    id: button_a_state
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - if:
          condition:
            lambda: "return id(button_a_busy);"
          then:
            - switch.toggle: button_a_state
      - lambda: "id(button_a_busy) = true;"
      # Update indicator based on local OR peer state
      - if:
          condition:
            lambda: 'return id(button_a_state).state || id(peer_a_state).state;'
          then:
            - light.turn_on: blue_led
          else:
            - light.turn_off: blue_led
      - if:
          condition:
            lambda: 'return !id(button_a_suppress);'
          then:
            - script.execute: a_on_action
            - if:
                condition:
                  lambda: 'return id(mode_a).state == std::string("Coupled") && id(relay_a).state == false;'
                then:
                  - switch.turn_on: relay_a
      - lambda: "id(button_a_busy) = false;"
    on_turn_off:
      - if:
          condition:
            lambda: "return id(button_a_busy);"
          then:
            - switch.toggle: button_a_state
      - lambda: "id(button_a_busy) = true;"
      # Update indicator based on local OR peer state
      - if:
          condition:
            lambda: 'return id(button_a_state).state || id(peer_a_state).state;'
          then:
            - light.turn_on: blue_led
          else:
            - light.turn_off: blue_led
      - if:
          condition:
            lambda: 'return !id(button_a_suppress);'
          then:
            - script.execute: a_off_action
            - if:
                condition:
                  lambda: 'return id(mode_a).state == std::string("Coupled") && id(relay_a).state == true;'
                then:
                  - switch.turn_off: relay_a
      - lambda: "id(button_a_busy) = false;"

  - platform: template
    name: "Button B state"
    id: button_b_state
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - if:
          condition:
            lambda: "return id(button_b_busy);"
          then:
            - switch.toggle: button_b_state
      - lambda: "id(button_b_busy) = true;"
      # Update indicator based on local OR peer state
      - if:
          condition:
            lambda: 'return id(button_b_state).state || id(peer_b_state).state;'
          then:
            - switch.turn_on: red_led
          else:
            - switch.turn_off: red_led
      - if:
          condition:
            lambda: 'return !id(button_b_suppress);'
          then:
            - script.execute: b_on_action
            - if:
                condition:
                  lambda: 'return id(mode_b).state == std::string("Coupled") && id(relay_b).state == false;'
                then:
                  - switch.turn_on: relay_b
      - lambda: "id(button_b_busy) = false;"
    on_turn_off:
      - if:
          condition:
            lambda: "return id(button_b_busy);"
          then:
            - switch.toggle: button_b_state
      - lambda: "id(button_b_busy) = true;"
      # Update indicator based on local OR peer state
      - if:
          condition:
            lambda: 'return id(button_b_state).state || id(peer_b_state).state;'
          then:
            - switch.turn_on: red_led
          else:
            - switch.turn_off: red_led
      - if:
          condition:
            lambda: 'return !id(button_b_suppress);'
          then:
            - script.execute: b_off_action
            - if:
                condition:
                  lambda: 'return id(mode_b).state == std::string("Coupled") && id(relay_b).state == true;'
                then:
                  - switch.turn_off: relay_b
      - lambda: "id(button_b_busy) = false;"

select:
  - platform: template
    id: mode_a
    name: "Button A mode"
    options:
      - "Coupled"
      - "Decoupled"
    optimistic: true
    restore_value: true
    initial_option: ${default_mode_a}
    entity_category: config

  - platform: template
    id: mode_b
    name: "Button B mode"
    options:
      - "Coupled"
      - "Decoupled"
    optimistic: true
    restore_value: true
    initial_option: ${default_mode_b}
    entity_category: config

  - platform: template
    id: relay_a_target_mode
    name: "Relay A target mode"
    options:
      - "On"
      - "Off"
    optimistic: true
    restore_value: true
    initial_option: ${default_relay_a_target_mode}
    entity_category: config
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(relay_a_target_mode).state == std::string("On");'
            then:
              - switch.turn_on: relay_a
            else:
              - switch.turn_off: relay_a

  - platform: template
    id: relay_b_target_mode
    name: "Relay B target mode"
    options:
      - "On"
      - "Off"
    optimistic: true
    restore_value: true
    initial_option: ${default_relay_b_target_mode}
    entity_category: config
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(relay_b_target_mode).state == std::string("On");'
            then:
              - switch.turn_on: relay_b
            else:
              - switch.turn_off: relay_b

binary_sensor:
  - platform: gpio
    id: button_a
    pin:
      number: ${button_a_gpio}
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true
    filters:
      - delayed_on: 15ms
      - delayed_off: 15ms
    on_press:
      - lambda: "id(a_hold_triggered) = false;"
      - script.execute: a_hold_check
    on_release:
      - if:
          condition:
            lambda: "return !id(a_hold_triggered);"
          then:
            - switch.toggle: button_a_state

  - platform: gpio
    id: button_b
    pin:
      number: ${button_b_gpio}
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true
    filters:
      - delayed_on: 15ms
      - delayed_off: 15ms
    on_press:
      - lambda: "id(b_hold_triggered) = false;"
      - script.execute: b_hold_check
    on_release:
      - if:
          condition:
            lambda: "return !id(b_hold_triggered);"
          then:
            - switch.toggle: button_b_state

  # Reflect peer button states (via Home Assistant) on the device indicator LEDs
  - platform: homeassistant
    id: peer_a_state
    entity_id: ${peer_button_a_entity}
    internal: true
    on_state:
      then:
        - if:
            condition:
              lambda: 'return id(peer_a_state).state || id(button_a_state).state;'
            then:
              - light.turn_on: blue_led
            else:
              - light.turn_off: blue_led

  - platform: homeassistant
    id: peer_b_state
    entity_id: ${peer_button_b_entity}
    internal: true
    on_state:
      then:
        - if:
            condition:
              lambda: 'return id(peer_b_state).state || id(button_b_state).state;'
            then:
              - switch.turn_on: red_led
            else:
              - switch.turn_off: red_led

script:
  - id: a_hold_blink
    mode: restart
    then:
      - while:
          condition:
            binary_sensor.is_on: button_a
          then:
            # Heartbeat pattern: short pulse, slightly longer pulse, then a pause
            - light.turn_on: blue_led
            - delay: 70ms
            - light.turn_off: blue_led
            - delay: 90ms
            - light.turn_on: blue_led
            - delay: 160ms
            - light.turn_off: blue_led
            - delay: 580ms
      - light.turn_off: blue_led

  - id: a_hold_check
    then:
      - delay: ${hold_start_ms}
      - if:
          condition:
            binary_sensor.is_on: button_a
          then:
            - lambda: "id(a_hold_triggered) = true;"
            - script.execute: a_hold_blink
            - button.press: button_a_sim_hold

  - id: a_on_action
    then:
      - if:
          condition:
            lambda: 'return std::string("${button_a_on_service}") != "" && std::string("${button_a_on_entity}") != "";'
          then:
            - homeassistant.service:
                service: "${button_a_on_service}"
                data:
                  entity_id: "${button_a_on_entity}"

  - id: a_off_action
    then:
      - if:
          condition:
            lambda: 'return std::string("${button_a_off_service}") != "" && std::string("${button_a_off_entity}") != "";'
          then:
            - homeassistant.service:
                service: "${button_a_off_service}"
                data:
                  entity_id: "${button_a_off_entity}"

  - id: a_hold_action
    then:
      - if:
          condition:
            lambda: 'return std::string("${button_a_hold_service}") != "" && std::string("${button_a_hold_entity}") != "";'
          then:
            - homeassistant.service:
                service: "${button_a_hold_service}"
                data:
                  entity_id: "${button_a_hold_entity}"

  - id: b_hold_blink
    mode: restart
    then:
      - while:
          condition:
            binary_sensor.is_on: button_b
          then:
            # Heartbeat pattern: same as A
            - light.turn_on: blue_led
            - delay: 70ms
            - light.turn_off: blue_led
            - delay: 90ms
            - light.turn_on: blue_led
            - delay: 160ms
            - light.turn_off: blue_led
            - delay: 580ms
      - light.turn_off: blue_led

  - id: b_hold_check
    then:
      - delay: ${hold_start_ms}
      - if:
          condition:
            binary_sensor.is_on: button_b
          then:
            - lambda: "id(b_hold_triggered) = true;"
            - script.execute: b_hold_blink
            - button.press: button_b_sim_hold

  - id: b_on_action
    then:
      - if:
          condition:
            lambda: 'return std::string("${button_b_on_service}") != "" && std::string("${button_b_on_entity}") != "";'
          then:
            - homeassistant.service:
                service: "${button_b_on_service}"
                data:
                  entity_id: "${button_b_on_entity}"

  - id: b_off_action
    then:
      - if:
          condition:
            lambda: 'return std::string("${button_b_off_service}") != "" && std::string("${button_b_off_entity}") != "";'
          then:
            - homeassistant.service:
                service: "${button_b_off_service}"
                data:
                  entity_id: "${button_b_off_entity}"

  - id: b_hold_action
    then:
      - if:
          condition:
            lambda: 'return std::string("${button_b_hold_service}") != "" && std::string("${button_b_hold_entity}") != "";'
          then:
            - homeassistant.service:
                service: "${button_b_hold_service}"
                data:
                  entity_id: "${button_b_hold_entity}"
