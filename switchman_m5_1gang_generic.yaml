# Generic package for Sonoff SwitchMan M5 (1-gang, EU)
# - Modes: Local / HA only / Both
# - Gestures: single (ON/OFF semantics), double (fan-out), hold (loop while pressed)
# - Offline behavior: relay-only; online resumes configured behavior
# - Indicator: panel backlight brightens when the followed entity is ON
#
# NOTE: Define wifi:/api:/ota: in your per-device file. This package assumes api: is present.

substitutions:
  device_name: ""
  device_friendly_name: ""

  # Entity to FOLLOW for state & indicator (defaults to our own relay)
  a_follow_entity: "switch.${device_name}_relay_a"

  # Single-press ON path (used when the followed entity is currently OFF)
  a_on_service: "switch.turn_on"     # e.g. "light.turn_on"
  a_on_entity: ""                    # e.g. "light.room_main"
  a_on_kelvin: "0"                   # optional; "0" = not sent
  a_on_brightness_pct: "0"           # optional; "0" = not sent

  # Single-press OFF path (used when the followed entity is currently ON)
  a_off_service: "switch.turn_off"   # e.g. "light.turn_off"
  a_off_entity: ""

  # Double-click fan-out (up to 3 service calls; optional)
  a_double_service: ""
  a_double_entity: ""
  a_double_service2: ""
  a_double_entity2: ""
  a_double_service3: ""
  a_double_entity3: ""
  a_double_step_pct: "0"             # for light.turn_on; "0" = not sent

  # Hold (repeats ~150ms while pressed & online; up to 3 calls; optional)
  a_hold_service: ""
  a_hold_entity: ""
  a_hold_service2: ""
  a_hold_entity2: ""
  a_hold_service3: ""
  a_hold_entity3: ""
  a_hold_step_pct: "0"               # for light.turn_on; "0" = not sent

  # Default operating mode for this gang
  default_mode_a: "Local"            # Local | HA only | Both

logger:

# ---- Hardware mapping (Sonoff M5 1-gang EU) ----
# Button A: GPIO0
# Relay A:  GPIO23
# Panel backlight PWM: GPIO18
# Status LED: GPIO5
status_led:
  pin: GPIO5

output:
  - platform: ledc
    id: panel_pwm
    pin: GPIO18
    frequency: 1000 Hz

light:
  - platform: monochromatic
    id: panel_backlight
    name: "${device_friendly_name} Panel Backlight"
    output: panel_pwm
    restore_mode: ALWAYS_ON
    default_transition_length: 0s

switch:
  - platform: gpio
    id: relay_a
    name: "${device_friendly_name} Relay A"
    pin: GPIO23
    # Keep bulbs powered in HA-only *only when* HA/API is connected
    on_turn_off:
      then:
        - if:
            condition:
              and:
                - lambda: 'return id(mode_a).state == "HA only";'
                - api.connected
            then:
              - switch.turn_on: relay_a

select:
  - platform: template
    id: mode_a
    name: "${device_friendly_name} â€“ Mode A"
    options:
      - Local
      - HA only
      - Both
    optimistic: true
    restore_value: true
    initial_option: ${default_mode_a}

esphome:
  on_boot:
    priority: -100
    then:
      - if:
          condition:
            and:
              - api.connected
              - lambda: 'return id(mode_a).state == "HA only";'
          then:
            - switch.turn_on: relay_a

binary_sensor:
  - platform: gpio
    id: btn_a
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    internal: true
    filters:
      - delayed_on_off: 30ms
    # Single click
    on_click:
      - min_length: 50ms
        max_length: 400ms
        then:
          - script.execute: a_single
    # Double click (if your build lacks on_double_click, we can swap to on_multi_click)
    on_double_click:
      - min_length: 50ms
        max_length: 350ms
        then:
          - script.execute: a_double
    # Hold: start loop after 500ms; stop when released
    on_press:
      then:
        - delay: 500ms
        - if:
            condition:
              binary_sensor.is_on: btn_a
            then:
              - script.execute: a_hold_loop
    on_release:
      then:
        - script.stop: a_hold_loop

# Follow HA entity for state & indicator (falls back to relay when HA is offline)
text_sensor:
  - platform: homeassistant
    id: a_state
    entity_id: ${a_follow_entity}
    on_value:
      then:
        - lambda: |-
            if (id(a_state).state == "on") {
              id(a_last_known_on) = true;
            } else if (id(a_state).state == "off") {
              id(a_last_known_on) = false;
            }
        - script.execute: update_indicator

globals:
  - id: a_last_known_on
    type: bool
    restore_value: no
    initial_value: 'false'

script:
  # Indicator brightness based on followed entity
  - id: update_indicator
    then:
      - lambda: |-
          bool on = (id(a_state).has_state() && id(a_state).state == "on");
          auto call = id(panel_backlight).turn_on();
          call.set_brightness(on ? 0.70f : 0.15f);
          call.perform();

  # --- Single press: decides OFF vs ON; offline = relay toggle only ---
  - id: a_single
    then:
      - if:
          condition:
            api.connected
          then:
            # Decide current state from HA (if available) else relay
            - lambda: |-
                bool is_on = id(a_last_known_on);
                if (!id(a_state).has_state()) { is_on = id(relay_a).state; }
                id(a_last_known_on) = !is_on;  // target state after this press
            # OFF path
            - if:
                condition:
                  lambda: 'return !id(a_last_known_on);'
                then:
                  - if:
                      condition:
                        lambda: 'return id(mode_a).state != "HA only";'
                      then:
                        - switch.turn_off: relay_a
                  - if:
                      condition:
                        lambda: 'return strlen("${a_off_entity}") > 0;'
                      then:
                        - homeassistant.service:
                            service: ${a_off_service}
                            data:
                              entity_id: ${a_off_entity}
            # ON path
            - if:
                condition:
                  lambda: 'return id(a_last_known_on);'
                then:
                  - if:
                      condition:
                        lambda: 'return id(mode_a).state != "HA only";'
                      then:
                        - switch.turn_on: relay_a
                  # build service call with optional fields
                  - if:
                      condition:
                        lambda: 'return strlen("${a_on_entity}") > 0;'
                      then:
                        - if:
                            condition:
                              lambda: 'return ${a_on_kelvin} != 0 && ${a_on_brightness_pct} != 0;'
                            then:
                              - homeassistant.service:
                                  service: ${a_on_service}
                                  data:
                                    entity_id: ${a_on_entity}
                                    kelvin: !lambda 'return ${a_on_kelvin};'
                                    brightness_pct: !lambda 'return ${a_on_brightness_pct};'
                        - if:
                            condition:
                              lambda: 'return ${a_on_kelvin} != 0 && ${a_on_brightness_pct} == 0;'
                            then:
                              - homeassistant.service:
                                  service: ${a_on_service}
                                  data:
                                    entity_id: ${a_on_entity}
                                    kelvin: !lambda 'return ${a_on_kelvin};'
                        - if:
                            condition:
                              lambda: 'return ${a_on_kelvin} == 0 && ${a_on_brightness_pct} != 0;'
                            then:
                              - homeassistant.service:
                                  service: ${a_on_service}
                                  data:
                                    entity_id: ${a_on_entity}
                                    brightness_pct: !lambda 'return ${a_on_brightness_pct};'
                        - if:
                            condition:
                              lambda: 'return ${a_on_kelvin} == 0 && ${a_on_brightness_pct} == 0;'
                            then:
                              - homeassistant.service:
                                  service: ${a_on_service}
                                  data:
                                    entity_id: ${a_on_entity}
          else:
            # Offline: act as a dumb switch
            - switch.toggle: relay_a

  # --- Double click: up to 3 HA service calls; offline falls back to relay toggle ---
  - id: a_double
    then:
      - if:
          condition:
            api.connected
          then:
            - if:
                condition:
                  lambda: 'return strlen("${a_double_entity}") > 0;'
                then:
                  - if:
                      condition:
                        lambda: 'return ${a_double_step_pct} != 0;'
                      then:
                        - homeassistant.service:
                            service: ${a_double_service}
                            data:
                              entity_id: ${a_double_entity}
                              brightness_step_pct: !lambda 'return ${a_double_step_pct};'
                      else:
                        - homeassistant.service:
                            service: ${a_double_service}
                            data:
                              entity_id: ${a_double_entity}
            - if:
                condition:
                  lambda: 'return strlen("${a_double_entity2}") > 0;'
                then:
                  - homeassistant.service:
                      service: ${a_double_service2}
                      data:
                        entity_id: ${a_double_entity2}
            - if:
                condition:
                  lambda: 'return strlen("${a_double_entity3}") > 0;'
                then:
                  - homeassistant.service:
                      service: ${a_double_service3}
                      data:
                        entity_id: ${a_double_entity3}
          else:
            - switch.toggle: relay_a

  # --- Hold: loop while pressed & online; emits up to 3 service calls per tick ---
  - id: a_hold_loop
    then:
      - while:
          condition:
            and:
              - binary_sensor.is_on: btn_a
              - api.connected
          then:
            - if:
                condition:
                  lambda: 'return strlen("${a_hold_entity}") > 0;'
                then:
                  - if:
                      condition:
                        lambda: 'return ${a_hold_step_pct} != 0;'
                      then:
                        - homeassistant.service:
                            service: ${a_hold_service}
                            data:
                              entity_id: ${a_hold_entity}
                              brightness_step_pct: !lambda 'return ${a_hold_step_pct};'
                      else:
                        - homeassistant.service:
                            service: ${a_hold_service}
                            data:
                              entity_id: ${a_hold_entity}
            - if:
                condition:
                  lambda: 'return strlen("${a_hold_entity2}") > 0;'
                then:
                  - homeassistant.service:
                      service: ${a_hold_service2}
                      data:
                        entity_id: ${a_hold_entity2}
            - if:
                condition:
                  lambda: 'return strlen("${a_hold_entity3}") > 0;'
                then:
                  - homeassistant.service:
                      service: ${a_hold_service3}
                      data:
                        entity_id: ${a_hold_entity3}
            - delay: 150ms
