# Sonoff SwitchMan M5 — 1-gang generic
# Modes:
# - Relay only      → relay only
# - Smart only      → HA services only (keep relay powered when online)
# - Smart + Relay   → both; output = OR(HA, relay)
#
# Output entity: "Switch Button A state"
# Backlight + Blue indicator follow the effective output state.
#
# NOTE: Set `device_slug` in your mini to the underscore form of device_name (no hyphens),
# e.g. device_name: office-light-switch-1  →  device_slug: office_light_switch_1

substitutions:
  device_name: ""
  device_friendly_name: ""
  device_slug: ""   # <-- REQUIRED: underscore version for HA entity ids

  a_follow_entity: "switch.${device_slug}_relay_a"

  a_on_service: "switch.turn_on"
  a_on_entity: ""
  a_on_kelvin: "0"
  a_on_brightness_pct: "0"

  a_off_service: "switch.turn_off"
  a_off_entity: ""

  a_double_service: ""
  a_double_entity: ""
  a_double_service2: ""
  a_double_entity2: ""
  a_double_service3: ""
  a_double_entity3: ""
  a_double_step_pct: "0"

  a_hold_service: ""
  a_hold_entity: ""
  a_hold_service2: ""
  a_hold_entity2: ""
  a_hold_service3: ""
  a_hold_entity3: ""
  a_hold_step_pct: "0"

  default_mode_a: "Relay only"  # Relay only | Smart only | Smart + Relay
  blue_led_inverted: "false"     # flip to "true" if your blue indicator looks inverted

esphome:
  name: ${device_name}
  friendly_name: ${device_friendly_name}
  on_boot:
    priority: -100
    then:
      - if:
          condition:
            and:
              - api.connected
              - lambda: 'return id(mode_a).state == "Smart only";'
          then:
            - switch.turn_on: relay_a
      - script.execute: refresh_output

logger:

# We do NOT use status_led: here; we control the blue LED ourselves to mirror output.

output:
  # Backlight PWM (panel LED driver)
  - platform: ledc
    id: panel_pwm
    pin: GPIO18
    frequency: 1000 Hz

  # Red LED (digital output; adjust pin if your hardware differs)
  - platform: gpio
    id: red_led_out
    pin: GPIO19

  # Blue indicator LED (binary pin). Invert if your hardware requires it.
  - platform: gpio
    id: blue_led_out
    pin:
      number: GPIO5
      inverted: ${blue_led_inverted}

light:
  # Panel backlight (“Blue LED” in UI → HA will prefix device name automatically)
  - platform: monochromatic
    id: panel_backlight
    name: "Blue LED"
    output: panel_pwm
    restore_mode: RESTORE_DEFAULT_OFF
    default_transition_length: 0s

  # Red LED
  - platform: binary
    id: panel_red_led
    name: "Red LED"
    output: red_led_out

  # Blue indicator LED (follows the button/output state)
  - platform: binary
    id: panel_blue_indicator
    name: "Blue Indicator LED"
    output: blue_led_out

switch:
  # Physical relay
  - platform: gpio
    id: relay_a
    name: "Relay A"
    pin: GPIO23
    on_turn_on:
      then:
        - script.execute: refresh_output
        - if:
            condition:
              lambda: 'return id(mode_a).state != "Smart only";'
            then:
              - if:
                  condition:
                    lambda: 'return id(behavior_a).state == "Momentary 200ms";'
                  then:
                    - delay: 200ms
                    - switch.turn_off: relay_a
              - if:
                  condition:
                    lambda: 'return id(behavior_a).state == "Inching";'
                  then:
                    - delay: !lambda 'return (uint32_t)(id(inching_a_secs).state * 1000);'
                    - switch.turn_off: relay_a
    on_turn_off:
      then:
        - script.execute: refresh_output
        - if:
            condition:
              and:
                - lambda: 'return id(mode_a).state == "Smart only";'
                - api.connected
            then:
              - switch.turn_on: relay_a

  # HA-facing output (the one you control in HA)
  - platform: template
    id: a_output
    name: "Switch Button A state"
    icon: mdi:light-switch
    lambda: |-
      bool ha_on = (id(a_state).has_state() && id(a_state).state == "on");
      bool rel_on = id(relay_a).state;
      std::string m = id(mode_a).state;
      if (m == "Relay only") return rel_on;
      if (m == "Smart only") return id(a_output_state);
      return (ha_on || rel_on);
    # Ensure LEDs follow immediately on user actions
    turn_on_action:
      - script.execute: a_do_on
      - light.turn_on: panel_blue_indicator
      - light.turn_on:
          id: panel_backlight
          brightness: 70%
      - script.execute: refresh_output
    turn_off_action:
      - script.execute: a_do_off
      - light.turn_off: panel_blue_indicator
      - light.turn_off: panel_backlight
      - script.execute: refresh_output

select:
  - platform: template
    id: mode_a
    name: "Mode A"
    options:
      - Relay only
      - Smart only
      - Smart + Relay
    optimistic: true
    restore_value: true
    initial_option: ${default_mode_a}
    entity_category: config

  - platform: template
    id: behavior_a
    name: "Relay A behavior"
    options:
      - Latching
      - Momentary 200ms
      - Inching
    optimistic: true
    restore_value: true
    initial_option: "Latching"
    entity_category: config

number:
  - platform: template
    id: inching_a_secs
    name: "Inching A (s)"
    min_value: 1
    max_value: 600
    step: 1
    initial_value: 5
    optimistic: true
    restore_value: true
    entity_category: config

binary_sensor:
  # Physical button
  - platform: gpio
    id: btn_a
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    internal: true
    filters:
      - delayed_on_off: 30ms
    on_click:
      - min_length: 50ms
        max_length: 400ms
        then:
          - script.execute: a_single
    on_double_click:
      - min_length: 50ms
        max_length: 350ms
        then:
          - script.execute: a_double
    on_press:
      then:
        - delay: 500ms
        - if:
            condition:
              binary_sensor.is_on: btn_a
            then:
              - script.execute: a_hold_loop
    on_release:
      then:
        - script.stop: a_hold_loop

  - platform: status
    name: "Status"

sensor:
  - platform: wifi_signal
    name: "WiFi RSSI"
    update_interval: 60s

  - platform: uptime
    name: "Uptime"
    update_interval: 60s

text_sensor:
  # Follow HA entity (built from device_slug to avoid hyphens)
  - platform: homeassistant
    id: a_state
    internal: true
    entity_id: ${a_follow_entity}
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(mode_a).state == "Smart only";'
            then:
              - lambda: |-
                  id(a_output_state) = (id(a_state).state == "on");
        - script.execute: refresh_output

  - platform: version
    name: "ESPHome Version"

  - platform: wifi_info
    ip_address:
      name: "IP"
    ssid:
      name: "SSID"
    bssid:
      name: "BSSID"
    mac_address:
      name: "MAC"

globals:
  - id: a_last_known_on
    type: bool
    restore_value: no
    initial_value: 'false'

  # Optimistic state in Smart only mode
  - id: a_output_state
    type: bool
    restore_value: no
    initial_value: 'false'

button:
  - platform: template
    name: "Simulate Double Click"
    on_press:
      - script.execute: a_double

  - platform: template
    name: "Simulate Hold (1.5s)"
    on_press:
      - script.execute: a_hold_burst

  - platform: restart
    name: "Restart"

script:
  # Compute effective output, publish it, and set LEDs to match
  - id: refresh_output
    then:
      - lambda: |-
          bool ha_on = (id(a_state).has_state() && id(a_state).state == "on");
          bool rel_on = id(relay_a).state;
          std::string m = id(mode_a).state;
          bool eff = false;
          if (m == "Relay only") eff = rel_on;
          else if (m == "Smart only") eff = id(a_output_state);
          else eff = (ha_on || rel_on);
          id(a_output).publish_state(eff);
          if (eff) {
            auto c = id(panel_backlight).turn_on();
            c.set_brightness(0.70f);
            c.perform();
            id(panel_blue_indicator).turn_on();
          } else {
            id(panel_backlight).turn_off();
            id(panel_blue_indicator).turn_off();
          }

  # Single press (offline → relay toggle)
  - id: a_single
    then:
      - if:
          condition:
            api.connected
          then:
            - lambda: |-
                bool ha_on = (id(a_state).has_state() && id(a_state).state == "on");
                bool rel_on = id(relay_a).state;
                std::string m = id(mode_a).state;
                bool eff = false;
                if (m == "Relay only") eff = rel_on;
                else if (m == "Smart only") eff = id(a_output_state);
                else eff = (ha_on || rel_on);
                // target state after click
                id(a_last_known_on) = !eff;
            # OFF path
            - if:
                condition:
                  lambda: 'return !id(a_last_known_on);'
                then:
                  - if:
                      condition:
                        lambda: 'return id(mode_a).state != "Smart only";'
                      then:
                        - switch.turn_off: relay_a
                  - if:
                      condition:
                        lambda: 'return strlen("${a_off_entity}") > 0;'
                      then:
                        - homeassistant.service:
                            service: ${a_off_service}
                            data:
                              entity_id: ${a_off_entity}
                  - if:
                      condition:
                        lambda: 'return id(mode_a).state == "Smart only";'
                      then:
                        - lambda: 'id(a_output_state) = false;'
            # ON path
            - if:
                condition:
                  lambda: 'return id(a_last_known_on);'
                then:
                  - if:
                      condition:
                        lambda: 'return id(mode_a).state != "Smart only";'
                      then:
                        - switch.turn_on: relay_a
                  - if:
                      condition:
                        lambda: 'return strlen("${a_on_entity}") > 0;'
                      then:
                        - if:
                            condition:
                              lambda: 'return ${a_on_kelvin} != 0 && ${a_on_brightness_pct} != 0;'
                            then:
                              - homeassistant.service:
                                  service: ${a_on_service}
                                  data:
                                    entity_id: ${a_on_entity}
                                    kelvin: !lambda 'return ${a_on_kelvin};'
                                    brightness_pct: !lambda 'return ${a_on_brightness_pct};'
                        - if:
                            condition:
                              lambda: 'return ${a_on_kelvin} != 0 && ${a_on_brightness_pct} == 0;'
                            then:
                              - homeassistant.service:
                                  service: ${a_on_service}
                                  data:
                                    entity_id: ${a_on_entity}
                                    kelvin: !lambda 'return ${a_on_kelvin};'
                        - if:
                            condition:
                              lambda: 'return ${a_on_kelvin} == 0 && ${a_on_brightness_pct} != 0;'
                            then:
                              - homeassistant.service:
                                  service: ${a_on_service}
                                  data:
                                    entity_id: ${a_on_entity}
                                    brightness_pct: !lambda 'return ${a_on_brightness_pct};'
                        - if:
                            condition:
                              lambda: 'return ${a_on_kelvin} == 0 && ${a_on_brightness_pct} == 0;'
                            then:
                              - homeassistant.service:
                                  service: ${a_on_service}
                                  data:
                                    entity_id: ${a_on_entity}
                  - if:
                      condition:
                        lambda: 'return id(mode_a).state == "Smart only";'
                      then:
                        - lambda: 'id(a_output_state) = true;'
            - script.execute: refresh_output
          else:
            - switch.toggle: relay_a
            - script.execute: refresh_output

  # Double click
  - id: a_double
    then:
      - if:
          condition:
            api.connected
          then:
            - if:
                condition:
                  lambda: 'return strlen("${a_double_entity}") > 0;'
                then:
                  - if:
                      condition:
                        lambda: 'return ${a_double_step_pct} != 0;'
                      then:
                        - homeassistant.service:
                            service: ${a_double_service}
                            data:
                              entity_id: ${a_double_entity}
                              brightness_step_pct: !lambda 'return ${a_double_step_pct};'
                      else:
                        - homeassistant.service:
                            service: ${a_double_service}
                            data:
                              entity_id: ${a_double_entity}
            - if:
                condition:
                  lambda: 'return strlen("${a_double_entity2}") > 0;'
                then:
                  - homeassistant.service:
                      service: ${a_double_service2}
                      data:
                        entity_id: ${a_double_entity2}
            - if:
                condition:
                  lambda: 'return strlen("${a_double_entity3}") > 0;'
                then:
                  - homeassistant.service:
                      service: ${a_double_service3}
                      data:
                        entity_id: ${a_double_entity3}
          else:
            - switch.toggle: relay_a
      - script.execute: refresh_output

  # Hold primitives
  - id: a_hold_tick
    then:
      - if:
          condition:
            api.connected
          then:
            - if:
                condition:
                  lambda: 'return strlen("${a_hold_entity}") > 0;'
                then:
                  - if:
                      condition:
                        lambda: 'return ${a_hold_step_pct} != 0;'
                      then:
                        - homeassistant.service:
                            service: ${a_hold_service}
                            data:
                              entity_id: ${a_hold_entity}
                              brightness_step_pct: !lambda 'return ${a_hold_step_pct};'
                      else:
                        - homeassistant.service:
                            service: ${a_hold_service}
                            data:
                              entity_id: ${a_hold_entity}
            - if:
                condition:
                  lambda: 'return strlen("${a_hold_entity2}") > 0;'
                then:
                  - homeassistant.service:
                      service: ${a_hold_service2}
                      data:
                        entity_id: ${a_hold_entity2}
            - if:
                condition:
                  lambda: 'return strlen("${a_hold_entity3}") > 0;'
                then:
                  - homeassistant.service:
                      service: ${a_hold_service3}
                      data:
                        entity_id: ${a_hold_entity3}
      - script.execute: refresh_output

  - id: a_hold_loop
    then:
      - while:
          condition:
            and:
              - binary_sensor.is_on: btn_a
              - api.connected
          then:
            - script.execute: a_hold_tick
            - delay: 150ms

  - id: a_hold_burst
    then:
      - repeat:
          count: 10
          then:
            - script.execute: a_hold_tick
            - delay: 150ms

  # Direct actions used by the Output switch
  - id: a_do_off
    then:
      - if:
          condition:
            lambda: 'return id(mode_a).state != "Smart only";'
          then:
            - switch.turn_off: relay_a
      - if:
          condition:
            lambda: 'return strlen("${a_off_entity}") > 0;'
          then:
            - homeassistant.service:
                service: ${a_off_service}
                data:
                  entity_id: ${a_off_entity}
      - if:
          condition:
            lambda: 'return id(mode_a).state == "Smart only";'
          then:
            - lambda: 'id(a_output_state) = false;'
      - script.execute: refresh_output

  - id: a_do_on
    then:
      - if:
          condition:
            lambda: 'return id(mode_a).state != "Smart only";'
          then:
            - switch.turn_on: relay_a
      - if:
          condition:
            lambda: 'return strlen("${a_on_entity}") > 0;'
          then:
            - if:
                condition:
                  lambda: 'return ${a_on_kelvin} != 0 && ${a_on_brightness_pct} != 0;'
                then:
                  - homeassistant.service:
                      service: ${a_on_service}
                      data:
                        entity_id: ${a_on_entity}
                        kelvin: !lambda 'return ${a_on_kelvin};'
                        brightness_pct: !lambda 'return ${a_on_brightness_pct};'
            - if:
                condition:
                  lambda: 'return ${a_on_kelvin} != 0 && ${a_on_brightness_pct} == 0;'
                then:
                  - homeassistant.service:
                      service: ${a_on_service}
                      data:
                        entity_id: ${a_on_entity}
                        kelvin: !lambda 'return ${a_on_kelvin};'
            - if:
                condition:
                  lambda: 'return ${a_on_kelvin} == 0 && ${a_on_brightness_pct} != 0;'
                then:
                  - homeassistant.service:
                      service: ${a_on_service}
                      data:
                        entity_id: ${a_on_entity}
                        brightness_pct: !lambda 'return ${a_on_brightness_pct};'
            - if:
                condition:
                  lambda: 'return ${a_on_kelvin} == 0 && ${a_on_brightness_pct} == 0;'
                then:
                  - homeassistant.service:
                      service: ${a_on_service}
                      data:
                        entity_id: ${a_on_entity}
      - if:
          condition:
            lambda: 'return id(mode_a).state == "Smart only";'
          then:
            - lambda: 'id(a_output_state) = true;'
      - script.execute: refresh_output
