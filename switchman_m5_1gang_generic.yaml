substitutions:
  device_model: "Switchman M5 (1-Gang)"
  device_make: "Sonoff"
  package_version: "3.4.1"

  # Defaults (override in mini as needed)
  indicator_led_default: "Red"            # Red | None
  backlight_brightness_pct: "70"          # 0â€“100
  log_level: INFO
  timezone: "Europe/Tallinn"

esphome:
  name: ${device_name}
  friendly_name: ${device_friendly_name}
  comment: "${device_model} by ${device_make} v${package_version}"
  on_boot:
    priority: -100
    then:
      - lambda: 'id(cpu_speed) = ESP.getCpuFreqMHz();'
      - light.turn_on: blue_status
      - light.turn_off: red_backlight
      - switch.turn_off: red_led
      - script.execute: refresh_output

logger:
  level: "${log_level}"
  baud_rate: 0

time:
  - platform: sntp
    id: time_service
    timezone: ${timezone}

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: ${wifi_ssid}
  password: ${wifi_password}
  ap:
    ssid: "${device_friendly_name} Fallback"
    password: ${ap_password}

api:
  encryption:
    key: ${api_key}
  reboot_timeout: 0s
  on_client_connected:
    then:
      - script.execute: refresh_output
  on_client_disconnected:
    then:
      - script.execute: refresh_output

ota:
  - platform: esphome
    password: ${ota_password}

captive_portal:

web_server:
  port: 80

# -------------------- IO (Sonoff M5 1-gang) --------------------
# GPIO00: Button 1 | GPIO23: Relay 1 | GPIO19: LED1 (red) | GPIO05: Status (blue, inverted) | GPIO18: PWM red backlight
output:
  - platform: ledc
    id: red_pwm
    pin: GPIO18
    frequency: 1000 Hz

light:
  - platform: status_led
    id: blue_status
    name: "Blue Status LED"
    pin:
      number: GPIO5
      inverted: true
      ignore_strapping_warning: true
    internal: true
    restore_mode: ALWAYS_OFF

  - platform: monochromatic
    id: red_backlight
    name: "Red Backlight (PWM)"
    output: red_pwm
    icon: "mdi:led-outline"
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF

switch:
  - platform: gpio
    id: relay_a
    name: "Relay A"
    pin: GPIO23
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_output
        - if:
            condition:
              lambda: 'return id(mode_a).state != "Smart only";'
            then:
              - if:
                  condition:
                    lambda: 'return id(behavior_a).state == "Momentary 200ms";'
                  then:
                    - delay: 200ms
                    - switch.turn_off: relay_a
              - if:
                  condition:
                    lambda: 'return id(behavior_a).state == "Inching";'
                  then:
                    - delay: !lambda 'return (uint32_t)(id(inching_a_secs).state * 1000);'
                    - switch.turn_off: relay_a
    on_turn_off:
      then:
        - script.execute: refresh_output

  - platform: gpio
    id: red_led
    name: "Red LED (indicator)"
    pin: GPIO19
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    id: a_output
    name: "Switch Button A state"
    icon: mdi:light-switch
    lambda: |-
      // Decide where to read "HA on": self (relay) vs HA entity
      bool use_self = std::string("${a_follow_mode}") == "self";
      bool ha_on = use_self ? id(relay_a).state
                            : (id(a_state).has_state() && id(a_state).state == "on");
      bool rel_on = id(relay_a).state;
      std::string m = id(mode_a).state;
      if (m == "Relay only") return rel_on;
      if (m == "Smart only") return id(a_output_state);
      return (ha_on || rel_on);
    turn_on_action:
      - script.execute: a_do_on
      - script.execute: refresh_output
    turn_off_action:
      - script.execute: a_do_off
      - script.execute: refresh_output

select:
  - platform: template
    id: mode_a
    name: "Mode A"
    options: [Relay only, Smart only, Smart + Relay]
    optimistic: true
    restore_value: true
    initial_option: ${default_mode_a}
    entity_category: config

  - platform: template
    id: behavior_a
    name: "Relay A behavior"
    options: [Latching, Momentary 200ms, Inching]
    optimistic: true
    restore_value: true
    initial_option: "Latching"
    entity_category: config

  - platform: template
    id: indicator_led
    name: "Indicator LED"
    options: [Red, None]
    optimistic: true
    restore_value: true
    initial_option: ${indicator_led_default}
    entity_category: config

number:
  - platform: template
    id: inching_a_secs
    name: "Inching A (s)"
    min_value: 1
    max_value: 600
    step: 1
    initial_value: 5
    optimistic: true
    restore_value: true
    entity_category: config

binary_sensor:
  - platform: gpio
    id: btn_a
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true
    internal: true
    filters:
      - delayed_on_off: 30ms
    on_click:
      - min_length: 50ms
        max_length: 400ms
        then:
          - script.execute: a_single
    on_double_click:
      - min_length: 50ms
        max_length: 350ms
        then:
          - script.execute: a_double
    on_press:
      then:
        - delay: 500ms
        - if:
            condition:
              binary_sensor.is_on: btn_a
            then:
              - script.execute: a_hold_loop
    on_release:
      then:
        - script.stop: a_hold_loop

  - platform: status
    name: "API Status"
    id: sensor_status
    disabled_by_default: true

  - platform: template
    id: api_connected
    name: "API connected"
    internal: true
    device_class: connectivity
    lambda: return global_api_server->is_connected();
    on_press:
      - light.turn_off: blue_status
    on_release:
      - light.turn_on: blue_status

sensor:
  - platform: wifi_signal
    name: "RSSI"
    id: sensor_rssi
    update_interval: 60s
    entity_category: diagnostic

  - platform: uptime
    name: "Uptime (raw seconds)"
    id: sensor_uptime
    update_interval: 60s
    entity_category: diagnostic
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(sensor_uptime).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds / 60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: "Free Memory"
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: diagnostic
    disabled_by_default: true

  - platform: internal_temperature
    name: "Internal Temperature"
    disabled_by_default: true
    icon: mdi:heat-wave
    entity_category: diagnostic

  - platform: template
    name: "CPU Frequency"
    icon: "mdi:speedometer"
    accuracy_decimals: 0
    unit_of_measurement: "MHz"
    disabled_by_default: true
    lambda: |-
      return (id(cpu_speed));
    entity_category: diagnostic

text_sensor:
  - platform: template
    name: "Uptime"
    id: uptime_human
    icon: "mdi:timer-check-outline"
    update_interval: 60s
    entity_category: diagnostic
    disabled_by_default: true

  - platform: version
    name: "ESPHome Version"

  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP Address"
      icon: "mdi:wan"
    ssid:
      name: "SSID"
    bssid:
      name: "BSSID"
    mac_address:
      name: "MAC"

  # Only used when a_follow_mode == "ha". If left blank or invalid, it just won't update.
  - platform: homeassistant
    id: a_state
    internal: true
    entity_id: ${a_follow_entity}
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(mode_a).state == "Smart only";'
            then:
              - lambda: |-
                  id(a_output_state) = (id(a_state).state == "on");
        - script.execute: refresh_output

globals:
  - id: a_last_known_on
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: a_output_state
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: cpu_speed
    type: int
    restore_value: no
    initial_value: "0"

button:
  - platform: template
    name: "Button A double click action"
    id: button_a_double_click_action
    on_press:
      - homeassistant.event:
          event: esphome.switchman_m5
          data: { button: A, action: double_click }

  - platform: template
    name: "Button A hold action"
    id: button_a_hold_action
    on_press:
      - homeassistant.event:
          event: esphome.switchman_m5
          data: { button: A, action: hold }

  - platform: template
    name: "Simulate Double Click"
    on_press:
      - script.execute: a_double

  - platform: template
    name: "Simulate Hold (1.5s)"
    on_press:
      - script.execute: a_hold_burst

  - platform: factory_reset
    name: "Load Factory Settings"
    id: factory_reset_all
    icon: mdi:factory

  - platform: restart
    name: "Reboot Device"
    id: button_restart
    icon: mdi:power-cycle
    entity_category: diagnostic

script:
  - id: refresh_output
    then:
      - lambda: |-
          bool use_self = std::string("${a_follow_mode}") == "self";
          bool ha_on = use_self ? id(relay_a).state
                                : (id(a_state).has_state() && id(a_state).state == "on");
          bool rel_on = id(relay_a).state;
          std::string m = id(mode_a).state;
          bool eff = false;
          if (m == "Relay only") eff = rel_on;
          else if (m == "Smart only") eff = id(a_output_state);
          else eff = (ha_on || rel_on);
          id(a_output).publish_state(eff);

      - light.turn_off: red_backlight
      - switch.turn_off: red_led

      - if:
          condition:
            lambda: 'return id(a_output).state && id(indicator_led).state == std::string("Red");'
          then:
            - switch.turn_on: red_led

      - if:
          condition:
            lambda: 'return !id(a_output).state && ${backlight_brightness_pct} > 0;'
          then:
            - light.turn_on:
                id: red_backlight
                brightness: !lambda 'return ${backlight_brightness_pct} / 100.0f;'

  - id: a_single
    then:
      - if:
          condition: api.connected
          then:
            - lambda: |-
                bool use_self = std::string("${a_follow_mode}") == "self";
                bool ha_on = use_self ? id(relay_a).state
                                      : (id(a_state).has_state() && id(a_state).state == "on");
                bool rel_on = id(relay_a).state;
                std::string m = id(mode_a).state;
                bool eff = false;
                if (m == "Relay only") eff = rel_on;
                else if (m == "Smart only") eff = id(a_output_state);
                else eff = (ha_on || rel_on);
                id(a_last_known_on) = !eff;

            - if:
                condition:
                  lambda: 'return !id(a_last_known_on);'
                then:
                  - if:
                      condition:
                        lambda: 'return id(mode_a).state != "Smart only";'
                      then:
                        - switch.turn_off: relay_a
                  - if:
                      condition:
                        lambda: 'return strlen("${a_off_entity}") > 0;'
                      then:
                        - homeassistant.service:
                            service: ${a_off_service}
                            data: { entity_id: ${a_off_entity} }
                  - if:
                      condition:
                        lambda: 'return id(mode_a).state == "Smart only";'
                      then:
                        - lambda: 'id(a_output_state) = false;'
                  - homeassistant.event:
                      event: esphome.switchman_m5
                      data: { button: A, action: switch_off }

            - if:
                condition:
                  lambda: 'return id(a_last_known_on);'
                then:
                  - if:
                      condition:
                        lambda: 'return id(mode_a).state != "Smart only";'
                      then:
                        - switch.turn_on: relay_a
                  - if:
                      condition:
                        lambda: 'return strlen("${a_on_entity}") > 0;'
                      then:
                        - homeassistant.service:
                            service: ${a_on_service}
                            data: { entity_id: ${a_on_entity} }
                  - if:
                      condition:
                        lambda: 'return id(mode_a).state == "Smart only";'
                      then:
                        - lambda: 'id(a_output_state) = true;'
                  - homeassistant.event:
                      event: esphome.switchman_m5
                      data: { button: A, action: switch_on }

            - script.execute: refresh_output
          else:
            - if:
                condition:
                  lambda: 'return id(mode_a).state == "Smart only";'
                then:
                  - lambda: 'id(a_output_state) = !id(a_output_state);'
                else:
                  - switch.toggle: relay_a
            - script.execute: refresh_output

  - id: a_double
    then:
      - if:
          condition: api.connected
          then:
            - if:
                condition:
                  lambda: 'return strlen("${a_double_entity}") > 0;'
                then:
                  - homeassistant.service:
                      service: ${a_double_service}
                      data: { entity_id: ${a_double_entity} }
      - button.press: button_a_double_click_action
      - script.execute: refresh_output

  - id: a_hold_tick
    then:
      - if:
          condition: api.connected
          then:
            - if:
                condition:
                  lambda: 'return strlen("${a_hold_entity}") > 0;'
                then:
                  - homeassistant.service:
                      service: ${a_hold_service}
                      data: { entity_id: ${a_hold_entity} }
      - button.press: button_a_hold_action
      - script.execute: refresh_output

  - id: a_hold_loop
    then:
      - while:
          condition:
            and:
              - binary_sensor.is_on: btn_a
              - api.connected
          then:
            - script.execute: a_hold_tick
            - delay: 150ms

  - id: a_hold_burst
    then:
      - repeat:
          count: 10
          then:
            - script.execute: a_hold_tick
            - delay: 150ms

  - id: a_do_off
    then:
      - if:
          condition:
            lambda: 'return id(mode_a).state != "Smart only";'
          then:
            - switch.turn_off: relay_a
      - if:
          condition:
            lambda: 'return strlen("${a_off_entity}") > 0;'
          then:
            - homeassistant.service:
                service: ${a_off_service}
                data: { entity_id: ${a_off_entity} }
      - if:
          condition:
            lambda: 'return id(mode_a).state == "Smart only";'
          then:
            - lambda: 'id(a_output_state) = false;'
      - homeassistant.event:
          event: esphome.switchman_m5
          data: { button: A, action: switch_off }
      - script.execute: refresh_output

  - id: a_do_on
    then:
      - if:
          condition:
            lambda: 'return id(mode_a).state != "Smart only";'
          then:
            - switch.turn_on: relay_a
      - if:
          condition:
            lambda: 'return strlen("${a_on_entity}") > 0;'
          then:
            - homeassistant.service:
                service: ${a_on_service}
                data: { entity_id: ${a_on_entity} }
      - if:
          condition:
            lambda: 'return id(mode_a).state == "Smart only";'
          then:
            - lambda: 'id(a_output_state) = true;'
      - homeassistant.event:
          event: esphome.switchman_m5
          data: { button: A, action: switch_on }
      - script.execute: refresh_output
