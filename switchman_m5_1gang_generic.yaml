substitutions:
  # Device identity (adjust to your setup)
  device_friendly_name: ""
  device_name: ""
  device_ip: ""
  device_make: "Sonoff"
  device_model: "Switchman M5 (1-Gang)"
  package_version: "3.0.0"

  api_key: !secret api_key
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  ota_password: !secret ota_password
  ap_password: !secret ap_password

  # Hardware pins (Sonoff Switchman M5 1-Gang defaults)
  button_a_gpio: GPIO00           # Button A
  relay_a_gpio: GPIO23            # Relay A
  led_indicator_gpio: GPIO19      # Red LED
  led_status_gpio: GPIO05         # Blue LED
  led_pwm_output_gpio: GPIO18     # LED PWM output

  # Runtime & logging
  log_level: INFO
  timezone: "Europe/Tallinn"

  # Button timings
  filter_delay_on: 50ms
  filter_delay_off: 50ms

  timing_double_click_1: ON for at most 500ms
  timing_double_click_2: OFF for at most 400ms
  timing_double_click_3: ON for at most 500ms
  timing_double_click_4: OFF for at least 250ms

  timing_hold: ON for at least 1s
  timing_hold_repeat: 500ms

  # Behavior selections
  default_mode_a: "Coupled"         # Coupled | Decoupled
  momentary_duration: 200ms         # Fixed for "Momentary 200ms"

  # Failover (Decoupled -> Coupled when HA offline)
  failover_default: "1"             # 1 = enabled, 0 = disabled

  # HA service wiring (leave empty to do nothing)
  button_a_on_service: ""           # e.g. "switch.turn_on"
  button_a_on_entity: ""            # e.g. "switch.some_switch"
  button_a_off_service: ""
  button_a_off_entity: ""
  button_a_double_service: ""
  button_a_double_entity: ""
  button_a_hold_service: ""
  button_a_hold_entity: ""

esphome:
  name: "${device_name}"
  friendly_name: "${device_friendly_name}"
  comment: "${device_model} by ${device_make} version ${package_version}"
  name_add_mac_suffix: false
  on_boot:
    - priority: 900.0
      then:
        - lambda: |-
            id(cpu_speed) = ESP.getCpuFreqMHz();

esp32:
  board: esp32dev
  framework:
    type: arduino
    version: recommended

logger:
  level: "${log_level}"
  baud_rate: 0

wifi:
  fast_connect: false
  power_save_mode: none
  ssid: "${wifi_ssid}"
  password: "${wifi_password}"
  ap:
    ssid: "${device_name}"
    password: "${ap_password}"

ota:
  - platform: esphome
    safe_mode: true
    password: "${ota_password}"

api:
  # encryption:
  #   key: "${api_key}"

web_server:
  port: 80

time:
  - platform: sntp
    id: time_service
    timezone: ${timezone}

captive_portal:

globals:
  - id: cpu_speed
    type: int
    restore_value: no
    initial_value: "0"

  # Persisted flag for failover (1/0)
  - id: failover_flag
    type: int
    restore_value: yes
    initial_value: ${failover_default}

#------------------------
# Sensors / Text sensors
#------------------------
text_sensor:
  - platform: wifi_info
    ip_address:
      id: ip_address
      name: "IP Address"
      icon: "mdi:wan"

  - platform: template
    name: "Uptime"
    id: uptime_human
    icon: "mdi:timer-check-outline"
    update_interval: 60s
    entity_category: "diagnostic"
    disabled_by_default: true

sensor:
  - platform: uptime
    name: "Uptime (s)"
    id: sensor_uptime
    update_interval: 60s
    entity_category: "diagnostic"
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(sensor_uptime).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds / 60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: "diagnostic"
    disabled_by_default: true

  - platform: internal_temperature
    name: "Internal Temperature"
    icon: mdi:heat-wave
    disabled_by_default: true

  - platform: template
    name: "CPU Frequency"
    icon: "mdi:speedometer"
    accuracy_decimals: 0
    unit_of_measurement: MHz
    disabled_by_default: true
    lambda: |-
      return (id(cpu_speed));
    entity_category: diagnostic

  - platform: wifi_signal
    name: "RSSI"
    id: sensor_rssi
    update_interval: 60s
    entity_category: "diagnostic"

#------------------------
# Buttons (utility + virtual)
#------------------------
button:
  - platform: restart
    name: "Reboot Device"
    id: button_restart
    icon: mdi:power-cycle
    entity_category: "diagnostic"

  - platform: factory_reset
    name: "Load Factory Settings"
    id: factory_reset_all
    icon: mdi:factory

  # Virtual buttons to simulate gestures from HA
  - platform: template
    name: "Button A – Simulate Double Click"
    id: button_a_sim_double
    on_press:
      - script.execute: a_double_action

  - platform: template
    name: "Button A – Simulate Hold"
    id: button_a_sim_hold
    on_press:
      - script.execute: a_hold_action

#------------------------
# Outputs / Lights (LEDs)
#------------------------
output:
  - platform: ledc
    id: pwm_output
    pin: ${led_pwm_output_gpio}
    frequency: 1000 Hz

light:
  - platform: monochromatic
    output: pwm_output
    name: "Red LED"
    restore_mode: RESTORE_DEFAULT_OFF
    icon: 'mdi:led-outline'
    entity_category: 'config'

  - platform: status_led
    name: "Blue LED"
    id: led_status
    pin:
      number: ${led_status_gpio}
      inverted: true
      ignore_strapping_warning: true
    restore_mode: RESTORE_DEFAULT_ON

#------------------------
# Switches (relay + indicator + failover toggle)
#------------------------
switch:
  - platform: gpio
    name: "LED indicator"
    id: led_indicator
    pin: ${led_indicator_gpio}

  - platform: gpio
    name: "Relay A"
    id: relay_a
    pin: ${relay_a_gpio}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - switch.turn_on: led_indicator
      - script.execute: a_on_action
      # Auto-off when "Inching" is selected, using number.inching_a_secs
      - if:
          condition:
            lambda: 'return id(behavior_a).state == std::string("Inching");'
          then:
            - script.execute: inching_a_off
    on_turn_off:
      - switch.turn_off: led_indicator
      - script.execute: a_off_action

  # Internal state used in Decoupled mode to track ON/OFF
  - platform: template
    name: "Button A state"
    id: button_a_state
    optimistic: true
    on_turn_on:
      - switch.turn_on: led_indicator
      - script.execute: a_on_action
    on_turn_off:
      - switch.turn_off: led_indicator
      - script.execute: a_off_action

  # UI toggle to enable/disable failover
  - platform: template
    name: "Failover: Decoupled→Coupled when HA offline"
    id: failover_decoupled_switch
    entity_category: config
    lambda: 'return id(failover_flag) == 1;'
    turn_on_action:
      - lambda: 'id(failover_flag) = 1;'
    turn_off_action:
      - lambda: 'id(failover_flag) = 0;'

#------------------------
# Selects (Mode & Behavior)
#------------------------
select:
  - platform: template
    id: mode_a
    name: "Mode - Button A"
    options:
      - Coupled
      - Decoupled
    optimistic: true
    restore_value: true
    initial_option: ${default_mode_a}
    entity_category: config

  - platform: template
    id: behavior_a
    name: "Relay A behavior"
    options:
      - Latching
      - Momentary 200ms
      - Inching
    optimistic: true
    restore_value: true
    initial_option: "Latching"
    entity_category: config

#------------------------
# Number (Inching seconds)
#------------------------
number:
  - platform: template
    id: inching_a_secs
    name: "Inching A (s)"
    min_value: 1
    max_value: 600
    step: 1
    initial_value: 5
    optimistic: true
    restore_value: true
    entity_category: config

#------------------------
# Binary sensors (button & status)
#------------------------
binary_sensor:
  # Connection-driven blue LED behavior (unchanged)
  - platform: template
    name: "API connected"
    id: sensor_api_connected
    internal: true
    entity_category: 'diagnostic'
    device_class: 'connectivity'
    lambda: return global_api_server->is_connected();
    on_press:
      - light.turn_off: led_status
    on_release:
      - light.turn_on: led_status

  - platform: status
    name: "API Status"
    id: sensor_status
    disabled_by_default: true

  - platform: gpio
    name: "Button A"
    id: button_a
    pin:
      number: ${button_a_gpio}
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true
    filters:
      - delayed_on: ${filter_delay_on}
      - delayed_off: ${filter_delay_off}

    # Physical press handling with failover
    on_press:
      - if:
          condition:
            lambda: |-
              const bool coupled = (id(mode_a).state == std::string("Coupled"));
              const bool decoupled_failover =
                  (id(mode_a).state == std::string("Decoupled"))
                  && (id(failover_flag) == 1)
                  && (!global_api_server->is_connected());
              return coupled || decoupled_failover;
          then:
            # Treat as Coupled: drive the relay according to behavior
            - if:
                condition:
                  lambda: 'return id(behavior_a).state == std::string("Latching");'
                then:
                  - switch.toggle: relay_a
            - if:
                condition:
                  lambda: 'return id(behavior_a).state == std::string("Momentary 200ms");'
                then:
                  - switch.turn_on: relay_a
                  - delay: ${momentary_duration}
                  - switch.turn_off: relay_a
            - if:
                condition:
                  lambda: 'return id(behavior_a).state == std::string("Inching");'
                then:
                  - switch.turn_on: relay_a   # on_turn_on schedules timed off
          else:
            # Decoupled (no failover): toggle internal state only
            - switch.toggle: button_a_state

    on_multi_click:
      # Double click detection
      - timing:
          - ${timing_double_click_1}
          - ${timing_double_click_2}
          - ${timing_double_click_3}
          - ${timing_double_click_4}
        then:
          - script.execute: a_double_action

      # Hold detection (repeat while held)
      - timing:
          - ${timing_hold}
        then:
          - while:
              condition:
                binary_sensor.is_on: button_a
              then:
                - light.toggle: led_status
                - script.execute: a_hold_action
                - delay: ${timing_hold_repeat}
          - light.turn_off: led_status

#------------------------
# Action scripts
#------------------------
script:
  # Turn relay off after N seconds (inching)
  - id: inching_a_off
    mode: restart
    then:
      - delay: !lambda |-
          return (uint32_t)(id(inching_a_secs).state * 1000.0f);
      - if:
          condition:
            switch.is_on: relay_a
          then:
            - switch.turn_off: relay_a

  - id: a_on_action
    mode: restart
    then:
      - if:
          condition:
            lambda: 'return std::string("${button_a_on_service}") != "" && std::string("${button_a_on_entity}") != "";'
          then:
            - homeassistant.service:
                service: "${button_a_on_service}"
                data:
                  entity_id: "${button_a_on_entity}"

  - id: a_off_action
    mode: restart
    then:
      - if:
          condition:
            lambda: 'return std::string("${button_a_off_service}") != "" && std::string("${button_a_off_entity}") != "";'
          then:
            - homeassistant.service:
                service: "${button_a_off_service}"
                data:
                  entity_id: "${button_a_off_entity}"

  - id: a_double_action
    mode: restart
    then:
      - if:
          condition:
            lambda: 'return std::string("${button_a_double_service}") != "" && std::string("${button_a_double_entity}") != "";'
          then:
            - homeassistant.service:
                service: "${button_a_double_service}"
                data:
                  entity_id: "${button_a_double_entity}"

  - id: a_hold_action
    mode: restart
    then:
      - if:
          condition:
            lambda: 'return std::string("${button_a_hold_service}") != "" && std::string("${button_a_hold_entity}") != "";'
          then:
            - homeassistant.service:
                service: "${button_a_hold_service}"
                data:
                  entity_id: "${button_a_hold_entity}"
